Neosavvy - Angular_Jasmine

01 - Setup
** Directorio vacio ns-jasimine-testing
** Crear directorios app y test
** Crear proyecto con npm
	$ npm init
	Opciones por defecto
	Crea package.json
	Crea node_modules donde se instalan los modulos propios del proyecto
** Instalar karma local o global (recomendado)
	$ npm install karma --save-dev  -> local
	$ npm install -g karma -> global
** Instalar Jasmine
	$ npm install karma-jasmine --save-dev
	$ npm install karma-chrome-launcher --save-dev
** Configurar karma   
	$ karma init
	Testing framework > jasmine
	Require.js > no
	Browser > Chrome
	Sources > app/**/*.js
	Test > test/**/*.js
	Karma watch all files > yes
** Crear test en carpeta test: test.js
	describe("true", function() {
		it("Should be true", function() {
			expect(true).toBeTruthy();
		});
	});
** Ejecutar test
	$ karma start karma.conf.js

02 - Bower
** Instalar Gestor de Dependencias bower
	$ npm install bower -g
** Añadir dependencias al proyecto
	$ bower install angular
	$ bower install angular-mocks
	$ bower install angular-resource
** Buscar dependencias con bower
	$ bower search angular
** Añadir dependencias a karma. En karma.conf.js
	files: [
		'bower_components/angular/angular.js',
		'bower_components/angular-mocks/angular-mocks.js',
		'bower_components/angular-resource/angular-resource.js',
		'app/**/*.js',
		'test/**/*.js'
	],

03 - Controller Testing
** app/controllers/pie-controller.js
	angular.module('pie', []).controller('PieController', 
		['$scope',
			function($scope) {

				$scope.eatSlice = function() {
					if ($scope.slices) {
						$scope.slices--;
					}
				};

				$scope.slices = 8;
		}]);      

** test/controllers/pie-controller-spec.js
	describe('PieController', function() {
		var $rootScope,
		    $scope,
		    controller;

		beforeEach(function() {
		    	module('pie');

		    	inject(function($injector) {
		    		$rootScope = $injector.get('$rootScope');
		    		$scope = $rootScope.$new();
		    		controller = $injector.get('$controller')('PieController', {$scope: $scope});
		    	});
		    });

		describe('Action Handlers', function() {
			
			describe('eatSlice', function() {
				it('Should decrement the number of slices', function() {
					expect($scope.slices).toEqual(8);
					$scope.eatSlice();
					expect($scope.slices).toEqual(7);
				});

				it('Should do nothing when slices is 0', function() {
					$scope.slices = 0;
					$scope.eatSlice();
					expect($scope.slices).toEqual(0);
				});
			});
			
		});

	    describe('Initialization', function() {
	    	it('Should instantiate slices to 8', function() {
	    		expect($scope.slices).toEqual(8);
	    	});
	    });    

	});

04 - Controller Testing ('this' methods)
** app/controllers/pie-controller.js
	angular.module('pie', []).controller('PieController', 
		['$scope',
			...
				this.requestFlavor = function(flavor) {
					$scope.lastRequestedFlavor = flavor;
				};

				$scope.lastRequestedFlavor;
				$scope.slices = 8;
		}]);

** test/controllers/pie-controller-spec.js
	describe('PieController', function() {
	...
	    describe('Initialization', function() {
	    ...
	    	it('Should instantiate $scope.lastRequestedFlavor', function() {
	    		expect($scope.lastRequestedFlavor).toBeUndefined();
	    	});
	    });    
	});

** test/controllers/pie-controller-spec.js
	describe('PieController', function() {
	...
		describe('requestFlavor', function() {
			
			it('Should set $scope.lastRequestedFlavor to the passed in argument', function() {
				controller.requestFlavor("Cherry");
				expect($scope.lastRequestedFlavor).toEqual("Cherry");
			});
		});
	...
	});

05 - Factory Testing
** app/managers/dessert-manager.js
angular.module('desserts', []).value('DessertValues', {
	pies: [
		{flavor: "Cherry", score: 6},
		{flavor: "Apple", score: 7.5},
		{flavor: "Peach", score: 4}
	]
});

angular.module('desserts').factory('DessertManager', 
	[ 'DessertValues', 
		function (dessertValues) {
			return {
				pieFlavors: function() {
					return dessertValues.pies.map(function(pie) {
						return pie.flavor;
					});
				}
			}
		}
	]);

** app/managers/dessert-manager-spec.js
describe('DessertManager', function() {
	var values, factory;

	beforeEach(function () {
		module('desserts');

		inject(function ($injector) {
			values = $injector.get('DessertValues');
			factory = $injector.get('DessertManager');
		});
	});

});

*** Testing values
describe('DessertManager', function() {
...
	describe('DessertValues', function() {
		
		it('Should instantiate with 3 pie flavors', function() {
			expect(values.pies).toEqual([
				{flavor: "Cherry", score: 6},
				{flavor: "Apple", score: 7.5},
				{flavor: "Peach", score: 4}
			]);
		});

	});
});

*** Testing factory
describe('DessertManager', function() {
...
	describe('DessertManager', function() {
		
		describe('pieFlavors', function() {
			
			it('Should return the 3 pie flavor strings', function() {
				
				var flavors = factory.pieFlavors();
				expect(flavors.length).toEqual(3);
				expect(flavors[0]).toEqual("Cherry");
				expect(flavors[1]).toEqual("Apple");
				expect(flavors[2]).toEqual("Peach");
			});

			it('Should throw an error if there are no pies', function() {
				
				values.pies = null;

				expect(function() {
					factory.pieFlavors();
				}).toThrow();

				values.pies = [
					{flavor: "Cherry", score: 6},
					{flavor: "Apple", score: 7.5},
					{flavor: "Peach", score: 4}
				];
			});
		});
	});

});

06 - Filter Testing
** app/filters/text/title-case.js
angular.module('filters', []).filter('titleCase', function() {
	return function(val) {
		return val ? val.replace(/\w\S*/g, function(txt) {
			return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
		}) : val;
	};
});

** test/title-case-spec.js
describe('titleCase', function() {
	var $filter, filter;

	beforeEach(function() {
		module('filters');
		inject(function($injector) {
			$filter = $injector.get('$filter');
			filter = $filter('titleCase');
		});
	});

	it('Should return undefined when undefined is passed in', function() {
		expect(filter(undefined)).toBeUndefined();
	});

	it('Should return null when null is passed in', function() {
		expect(filter(null)).toBeNull();
	});

	it('Should return a blank string when a blank string is passed in', function() {
		expect(filter("")).toEqual("");
	});

	it('Should change the casing of lower cased word', function() {
		expect(filter("george harrison")).toEqual("George Harrison");
	});

	it('Should change the casing if an upper case word', function() {
		expect(filter("GEORGE HARRISON")).toEqual("George Harrison");
	});

	it('Should change the casing of random', function() {
		expect(filter("the QUiCk BrOwN foX")).toEqual("The Quick Brown Fox");
	});

	it('Should play nice with a normal phrase', function() {
		expect(filter("This Is A Control")).toEqual("This Is A Control");
	});

});

