Neosavvy - Angular_Jasmine

01 - Setup
** Directorio vacio ns-jasimine-testing
** Crear directorios app y test
** Crear proyecto con npm
	$ npm init
	Opciones por defecto
	Crea package.json
	Crea node_modules donde se instalan los modulos propios del proyecto
** Instalar karma local o global (recomendado)
	$ npm install karma --save-dev  -> local
	$ npm install -g karma -> global
** Instalar Jasmine
	$ npm install karma-jasmine --save-dev
	$ npm install karma-chrome-launcher --save-dev
** Configurar karma   
	$ karma init
	Testing framework > jasmine
	Require.js > no
	Browser > Chrome
	Sources > app/**/*.js
	Test > test/**/*.js
	Karma watch all files > yes
** Crear test en carpeta test: test.js
	describe("true", function() {
		it("Should be true", function() {
			expect(true).toBeTruthy();
		});
	});
** Ejecutar test
	$ karma start karma.conf.js

02 - Bower
** Instalar Gestor de Dependencias bower
	$ npm install bower -g
** Añadir dependencias al proyecto
	$ bower install angular
	$ bower install angular-mocks
	$ bower install angular-resource
** Buscar dependencias con bower
	$ bower search angular
** Añadir dependencias a karma. En karma.conf.js
	files: [
		'bower_components/angular/angular.js',
		'bower_components/angular-mocks/angular-mocks.js',
		'bower_components/angular-resource/angular-resource.js',
		'app/**/*.js',
		'test/**/*.js'
	],

03 - Controller Testing
** app/controllers/pie-controller.js
	angular.module('pie', []).controller('PieController', 
		['$scope',
			function($scope) {

				$scope.eatSlice = function() {
					if ($scope.slices) {
						$scope.slices--;
					}
				};

				$scope.slices = 8;
		}]);      

** test/controllers/pie-controller-spec.js
	describe('PieController', function() {
		var $rootScope,
		    $scope,
		    controller;

		beforeEach(function() {
		    	module('pie');

		    	inject(function($injector) {
		    		$rootScope = $injector.get('$rootScope');
		    		$scope = $rootScope.$new();
		    		controller = $injector.get('$controller')('PieController', {$scope: $scope});
		    	});
		    });

		describe('Action Handlers', function() {
			
			describe('eatSlice', function() {
				it('Should decrement the number of slices', function() {
					expect($scope.slices).toEqual(8);
					$scope.eatSlice();
					expect($scope.slices).toEqual(7);
				});

				it('Should do nothing when slices is 0', function() {
					$scope.slices = 0;
					$scope.eatSlice();
					expect($scope.slices).toEqual(0);
				});
			});
			
		});

	    describe('Initialization', function() {
	    	it('Should instantiate slices to 8', function() {
	    		expect($scope.slices).toEqual(8);
	    	});
	    });    

	});

04 - Controller Testing ('this' methods)
** app/controllers/pie-controller.js
	angular.module('pie', []).controller('PieController', 
		['$scope',
			...
				this.requestFlavor = function(flavor) {
					$scope.lastRequestedFlavor = flavor;
				};

				$scope.lastRequestedFlavor;
				$scope.slices = 8;
		}]);

** test/controllers/pie-controller-spec.js
	describe('PieController', function() {
	...
	    describe('Initialization', function() {
	    ...
	    	it('Should instantiate $scope.lastRequestedFlavor', function() {
	    		expect($scope.lastRequestedFlavor).toBeUndefined();
	    	});
	    });    
	});

** test/controllers/pie-controller-spec.js
	describe('PieController', function() {
	...
		describe('requestFlavor', function() {
			
			it('Should set $scope.lastRequestedFlavor to the passed in argument', function() {
				controller.requestFlavor("Cherry");
				expect($scope.lastRequestedFlavor).toEqual("Cherry");
			});
		});
	...
	});

05 - Factory Testing
** app/managers/dessert-manager.js
angular.module('desserts', []).value('DessertValues', {
	pies: [
		{flavor: "Cherry", score: 6},
		{flavor: "Apple", score: 7.5},
		{flavor: "Peach", score: 4}
	]
});

angular.module('desserts').factory('DessertManager', 
	[ 'DessertValues', 
		function (dessertValues) {
			return {
				pieFlavors: function() {
					return dessertValues.pies.map(function(pie) {
						return pie.flavor;
					});
				}
			}
		}
	]);

** app/managers/dessert-manager-spec.js
describe('DessertManager', function() {
	var values, factory;

	beforeEach(function () {
		module('desserts');

		inject(function ($injector) {
			values = $injector.get('DessertValues');
			factory = $injector.get('DessertManager');
		});
	});

});

*** Testing values
describe('DessertManager', function() {
...
	describe('DessertValues', function() {
		
		it('Should instantiate with 3 pie flavors', function() {
			expect(values.pies).toEqual([
				{flavor: "Cherry", score: 6},
				{flavor: "Apple", score: 7.5},
				{flavor: "Peach", score: 4}
			]);
		});

	});
});

*** Testing factory
describe('DessertManager', function() {
...
	describe('DessertManager', function() {
		
		describe('pieFlavors', function() {
			
			it('Should return the 3 pie flavor strings', function() {
				
				var flavors = factory.pieFlavors();
				expect(flavors.length).toEqual(3);
				expect(flavors[0]).toEqual("Cherry");
				expect(flavors[1]).toEqual("Apple");
				expect(flavors[2]).toEqual("Peach");
			});

			it('Should throw an error if there are no pies', function() {
				
				values.pies = null;

				expect(function() {
					factory.pieFlavors();
				}).toThrow();

				values.pies = [
					{flavor: "Cherry", score: 6},
					{flavor: "Apple", score: 7.5},
					{flavor: "Peach", score: 4}
				];
			});
		});
	});

});

06 - Filter Testing
** app/filters/text/title-case.js
angular.module('filters', []).filter('titleCase', function() {
	return function(val) {
		return val ? val.replace(/\w\S*/g, function(txt) {
			return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
		}) : val;
	};
});

** test/title-case-spec.js
describe('titleCase', function() {
	var $filter, filter;

	beforeEach(function() {
		module('filters');
		inject(function($injector) {
			$filter = $injector.get('$filter');
			filter = $filter('titleCase');
		});
	});

	it('Should return undefined when undefined is passed in', function() {
		expect(filter(undefined)).toBeUndefined();
	});

	it('Should return null when null is passed in', function() {
		expect(filter(null)).toBeNull();
	});

	it('Should return a blank string when a blank string is passed in', function() {
		expect(filter("")).toEqual("");
	});

	it('Should change the casing of lower cased word', function() {
		expect(filter("george harrison")).toEqual("George Harrison");
	});

	it('Should change the casing if an upper case word', function() {
		expect(filter("GEORGE HARRISON")).toEqual("George Harrison");
	});

	it('Should change the casing of random', function() {
		expect(filter("the QUiCk BrOwN foX")).toEqual("The Quick Brown Fox");
	});

	it('Should play nice with a normal phrase', function() {
		expect(filter("This Is A Control")).toEqual("This Is A Control");
	});

});

07 - Directive Testing
** Añadir jQuery como dependencia al proyecto
	$ bower install jquery
** Añadir dependencia jquery a karma. En karma.conf.js
	files: [
        'bower_components/jquery/dist/jquery.js',
		...
	],

** app/directives/stateful.js 
angular.module('directives', []).directive('nsStateful',
	function(){
		return {
			restrict: 'A', // E = Element, A = Attribute, C = Class, M = Comment
			scope: false, // {} = isolate, true = child, false/undefined = no change
			link: function($scope, element, attrs) {
				if (!attrs.nsStateful) {
					throw "You must provide a class name in order to use the nsStateful directive.";
				}

				element.bind('click', function(e) {
					scope.$apply(function() {
						if (!element.hasClass(attrs.nsStateful)) {
							element.addClass(attrs.nsStateful);
						} else {
							element.removeClass(attrs.nsStateful);
						}
					});
				});
			}
		}
	});

** test/directives/stateful-spec.js 
describe('nsStateful', function() {
	var $rootScope,
 		$scope,
 		$compile,
 		el,
 		body = $('body'),
 		simpleHtml = '<button ns-stateful="red"></button>';

	beforeEach(function() {
		module('directives');

		inject(function($injector) {
			$rootScope = $injector.get('$rootScope');
			$scope = $rootScope.$new();
			$compile = $injector.get('$compile');
			el = $compile(angular.element(simpleHtml))($scope);
		});

		$body.append(el);
		$rootScope.$digest();
	});

	it('Should be able to toggle the class based on clicks', function() {
		expect(el.hasClass('red')).toBeFalsy();
		el.click();
		$scope.$digest();
		expect(el.hasClass('red')).toBeTruthy();
		el.click();
		$scope.$digest();
		expect(el.hasClass('red')).toBeFalsy();
		el.click();
		$scope.$digest();
		expect(el.hasClass('red')).toBeTruthy();
	});

	it('Should throw an error when compiled with an empty name', function() {
		expect(function() {
			$compile(angular.element('<a ns-stateful></a>'))($scope);
		}).toThrow();
	});
});

08 - Testing Directives with External Templates  -> DA ERROR
** Instalar karma-ng-html2js-preprocessor
	$ npm install karma-ng-html2js-preprocessor --save-dev
** Incluir en configuración de karma.conf.js
    files: [
      ...
      'app/**/*.html',
    ],

    preprocessors: {
        'app/**/*.html': ['ng-html2js']
    },

    ngHtml2JsPreprocessor: {
        moduleName: 'templates'
    },
** app/directives/text-and-sub.js
angular.module('directives').directive('nsTextAndSub', 
	function(){
		return {
			restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
			templateUrl: 'app/directives/text-and-sub.html',
			scope: {
				text: "@",
				sub: "@"
			},
			link: function(scope, element, attrs) {
			}
		};
	});
** app/directives/text-and-sub.html
<span class="text-and-sub">
	<h3 ng-bind="text"></h3>
	<h5 ng-bind="sub"
		ng-show="sub"></h5>
</span>
** test/directives/text-and-sub-spec.js
describe('nsTextAndSub', function() {
	var $rootScope,
		$scope,
		$compile,
		el,
		$el,
		$body = $('body'),
		simpleHtml = '<ns-text-and-sub text="{{scopeText}}" sub="{{scopeSub}}"></ns-text-and-sub>';
/*
	beforeEach(function() {
		module('templates', 'directives');

		inject(function($injector) {
			$rootScope = $injector.get('$rootScope');
			$compile = $injector.get('$compile');
			$scope = $rootScope.$new();
			el = $compile(angular.element(simpleHtml))($scope);
		});

		$body.append(el);
		$rootScope.$digest();

		// Grabs from the body, confirms it was compiled out
		$el = $('.text-and-sub');
	});

	afterEach(function() {
		$body.empty();
	});

	it('Should render the directive out in the dom', function() {
		expect($el.length).toEqual(1);
	});

	it('Should render out the text when given in scope', function() {
		$scope.scopeText = "Jungle Land";
		$scope.$digest();
		expect($el.find('h3').text()).toEqual("Jungle Land");		
	});

	it('Should render out the sub when given in scope', function() {
		$scope.scopeSub = "Little Stevie";
		$scope.$digest();
		expect($el.find('h5').text()).toEqual("Little Stevie");		
	});

	it('Should hide the sub text when it is not defined', function() {
		expect($el.find('h5').is(":visible")).toBeFalsy();
	});

	it('Should show the sub text when it is defined', function() {
		$scope.scopeSub = "Little Stevie";
		$scope.$digest();
		expect($el.find('h5').is(":visible")).toBeTruthy();
	});
*/
});

