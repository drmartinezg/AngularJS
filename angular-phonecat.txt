Phonecat Tutorial
==================

* Necesario tener instaladi git y nodejs
  $ node --version
* Clonar repositorio
  $ git clone https://github.com/angular/angular-phonecat.git
  $ cd angular-phonecat
* Descargar herramientas NodeJs en directorio node_modules: 
** Bower -> Gestor de paquetes
** Htt-Server -> Servidor web local
** Karma -> unit test runner
** Protractor -> end to end (E2E) test runner
  $ npm install
* Scripts preconfigurados
  $ npm start -> Arranca servidor web local de desarrollo 
    http://localhost:8000/app/index.html 
  $ npm test  -> Arranca el ejecutor de test unitarios de Karma
  $ npm run protractor -> Ejecuta los test E2E con Protractor
  $ npm run update-webdriver -> Instala los drivers que necesita Protractor

0 - Bootstrapping 
  $ git checkout -f step-0
  -> index.html ->  <p>1 + 2 = {{ 1 + 2 }}</p>

1 - Static Template
  $ git checkout -f step-1

2 - Angular Templates
  $ git checkout -f step-2

  -> test/unit/controllersSpec.js:
		describe('PhoneListCtrl', function(){
		  beforeEach(module('phonecatApp'));
		  it('should create "phones" model with 3 phones', inject(function($controller) {
		    var scope = {},
		        ctrl = $controller('PhoneListCtrl', {$scope:scope});

		    expect(scope.phones.length).toBe(3);
		  }));
		});

  $ npm test

3 - Filtering Repeaters (2a)
  $ git checkout -f step-3
  -> index.html
		Search: <input ng-model="query">
		<li ng-repeat="phone in phones | filter:query">

  -> test/e2e/scenarios.js:
		describe('PhoneCat App', function() {
		  describe('Phone list view', function() {
		    beforeEach(function() {
		      browser.get('app/index.html');
		    });
		    it('should filter the phone list as a user types into the search box', function() {
		      var phoneList = element.all(by.repeater('phone in phones'));
		      var query = element(by.model('query'));
		      expect(phoneList.count()).toBe(3);

		      query.sendKeys('nexus');
		      expect(phoneList.count()).toBe(1);

		      query.clear();
		      query.sendKeys('motorola');
		      expect(phoneList.count()).toBe(2);
		    });
		  });
		});

** Ejecutar test End to End con Protractor
  $ npm start -> Arranca servidor web local de desarrollo 
  $ npm run protractor -> Ejecuta los test E2E con Protractor
  $ npm run update-webdriver -> Instala los drivers que necesita Protractor

4 - Two-way Data Binding (2b)
  $ git checkout -f step-4
  -> index.html

		Search: <input ng-model="query">
		Sort by:
		<select ng-model="orderProp">
		  <option value="name">Alphabetical</option>
		  <option value="age">Newest</option>
		</select>


		<ul class="phones">
		  <li ng-repeat="phone in phones | filter:query | orderBy:orderProp">
		    <span>{{phone.name}}</span>
		    <p>{{phone.snippet}}</p>
		  </li>
		</ul>

5 - XHRs & Dependency Injection (3a)
