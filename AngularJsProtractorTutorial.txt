AngularJs Protractor Tutorial

01 - Framework Setup

Protractor es un framework Javascript, basado en node.js que permite escribir test de aceptación (end-to-end test).
Los test escritos en JavaScript permiten simular historias de usuario en el browser.
Protractor se basa en Webdriver.
Infraestructura:

* NodeJs - Instalar desde nodejs.org
** Comprobar instalación de Nodejs: 
   $ node --version  -> 0.12.6
** Comprobar Node Package Manager:  
   $ npm --version   -> 2.11.2

* Protactor 
  $ npm install -g protactor
  Se instala en %HOMEPATH%\AppData\Roaming\npm y %HOMEPATH%\AppData\Roaming\npm-cache
** Comprobar Protractor
  $ protractor --version  -> 2.1.0
** Listado con módulos globales instalados
  $ npm -g list

* Selenium Server - WebDriver
** Se necesita Selenium Server para ejecutar los test con Protractor. Selenimun Server necesita un JDK instalado.
** Actualizar webdriver-manager para obtener la última versión (incluye chromedriver)
  $ webdriver-manager update
** Arrancar Selenium Server
  $ webdriver-manager start

* Con protractor se instalan unos dummy test para verificar que todo está bien instalado.
  Se instalan en %HOMEPATH%\AppData\Roaming\npm\node_modules\protractor\example
** Ejecutar los test
  $ protractor conf.js

** Contenido de example_spec.js
	describe('angularjs homepage', function() {
	  it('should greet the named user', function() {
	    browser.get('http://www.angularjs.org');

	    element(by.model('yourName')).sendKeys('Julie');

	    var greeting = element(by.binding('yourName'));

	    expect(greeting.getText()).toEqual('Hello Julie!');
	  });

	  describe('todo list', function() {
	    var todoList;

	    beforeEach(function() {
	      browser.get('http://www.angularjs.org');

	      todoList = element.all(by.repeater('todo in todoList.todos'));
	    });

	    it('should list todos', function() {
	      expect(todoList.count()).toEqual(2);
	      expect(todoList.get(1).getText()).toEqual('build an angular app');
	    });

	    it('should add a todo', function() {
	      var addTodo = element(by.model('todoList.todoText'));
	      var addButton = element(by.css('[value="add"]'));

	      addTodo.sendKeys('write a protractor test');
	      addButton.click();

	      expect(todoList.count()).toEqual(3);
	      expect(todoList.get(2).getText()).toEqual('write a protractor test');
	    });
	  });
	});

02 - Configuration and Basic Test

* Configuration file - Contenido del conf.js
	// An example configuration file.
	exports.config = {
	  // Using ChromeDriver directly (new)
	  directConnect: true,

	  // Using Selenium Server
	  // seleniumAddress: 'http://localhost:4444/wd/hub',

	  // Capabilities to be passed to the webdriver instance.
	  capabilities: {
	    'browserName': 'chrome'
	  },

	  // Framework to use. Jasmine 2 is recommended.
	  framework: 'jasmine2',

	  // Spec patterns are relative to the current working directly when
	  // protractor is called.
	  specs: ['zoo_spec.js'],

	  // Options to be passed to Jasmine.
	  jasmineNodeOpts: {
	    defaultTimeoutInterval: 30000
	  }
	};

* Basic Test - Contenido de zoo_spec.js
	describe('Test zoo site for input field on home page', function() {
		it('should test input field and check text output', function() {
			browser.get("http://www.thetestroom.com/jswebapp/")
			element(by.model("person.name")).sendKeys("I will subscribe to this channel");
			element(by.binding("person.name")).getText().then(function(text) {
				console.log(text);
			})
		});
	});

03 - Using Locators

* zoo_spec.js con varios ejemplos de localización de elementos y navegación entre páginas.

	describe('Adopt an animal on the zoo test site', function() {

		it('should able to adopt an animal', function() {
			browser.get("http://www.thetestroom.com/jswebapp/")
			element(by.model("person.name")).sendKeys("Manuel");
			element(by.binding("person.name")).getText().then(function(text) {
				console.log(text);
			});
			element(by.buttonText("CONTINUE")).click();
			element(by.model("animal")).$('[value="1"]').click();
			element(by.partialButtonText("CONT")).click();

		});	

	});

04 - Using Expects

* zoo_spec.js con varios escenarios con ejemplos de diferentes validaciones.

	describe('Adopt an animal on the zoo test site', function() {

		it('should able on correct page', function() {
			browser.get("http://www.thetestroom.com/jswebapp/");
			expect(browser.getCurrentUrl()).toContain("jswebapp");
			expect(browser.getCurrentUrl()).toEqual("http://www.thetestroom.com/jswebapp/");
		});	

		it('should generate correct text', function() {
			browser.get("http://www.thetestroom.com/jswebapp/");
			var textMessage = "Manuel es el nombre de la persona";

			element(by.model("person.name")).sendKeys(textMessage);
			element(by.binding("person.name")).getText().then(function(text) {
				expect(text).toEqual(textMessage);
			});
		});	

		it('should check the correct number of items in drop down', function() {
			browser.get("http://www.thetestroom.com/jswebapp/");
			element(by.buttonText("CONTINUE")).click();
			element(by.model("animal")).$('[value="1"]').click();

			element.all(by.css(".ng-pristine option")).then(function(items) {
				expect(items.length).toBe(4);
				expect(items[1].getText()).toBe("George the Turtle");
			});
		});	

		it('should check user is on the thank you page', function() {
			browser.get("http://www.thetestroom.com/jswebapp/");
			element(by.buttonText("CONTINUE")).click();
			element(by.buttonText("CONTINUE")).click();
			expect(browser.getCurrentUrl()).toContain("confirm");
		});	

	});

05 - Before and After

* beforeEach y afterEach se utilizan para ejecutar sentencias antes de despues de cada escenario/test.
* zoo_spec.js con ejemplos de métodos beforeEach y afterEach.

	describe('Adopt an animal on the zoo test site', function() {

		beforeEach(function() {
			browser.get("http://www.thetestroom.com/jswebapp/");
		});

		afterEach(function() {
			console.log("After method executed");
		});

		it('should able on correct page', function() {
			expect(browser.getCurrentUrl()).toEqual("http://www.thetestroom.com/jswebapp/");
		});	

		describe('should generate correct text', function() {
			var textMessage;

			beforeEach(function() {
				textMessage = "Manuel es el nombre de la persona";			
			});

			it('should check correct text', function() {
				element(by.model("person.name")).sendKeys(textMessage);
				element(by.binding("person.name")).getText().then(function(text) {
					expect(text).toEqual(textMessage);
				});
			});
		});	

		describe('should check the correct number of items in drop down', function() {

			var lengthOfItems;

			beforeEach(function() {
				lengthOfItems = 4;
			});

			it('should check number of items', function() {
				element(by.buttonText("CONTINUE")).click();
				element(by.model("animal")).$('[value="1"]').click();

				element.all(by.css(".ng-pristine option")).then(function(items) {
					expect(items.length).toBe(lengthOfItems);
					expect(items[1].getText()).toBe("George the Turtle");
				});
			});
		});	

		it('should check user is on the thank you page', function() {
			element(by.buttonText("CONTINUE")).click();
			element(by.buttonText("CONTINUE")).click();
			expect(browser.getCurrentUrl()).toContain("confirm");
		});	

	});

06 - Writting CSS Expressions

* zoo_css_exp_spec.js con ejemplos de expresiones CSS para seleccionar elementos de una página.
	describe('Testing the JavaScript zoo site', function() {
		
		beforeEach(function() {
			browser.get("http://www.thetestroom.com/jswebapp/index.html");
		});

		it('should test by using CSS expressions', function() {
			// css tag
			element(by.css('input')).sendKeys("text test");

			// css class
			element(by.css('.ng-binding')).getText().then(function (text) {
				console.log(text);
			});

			// css ids
			element(by.css('#continue_button')).click();

			// css chaining
			element(by.css('button#continue_button')).click();

			// css child nodes
			element(by.css('table td a')).getText().then(function (text) {
				console.log(text);
			});

			// css attributes
			element(by.css('h1[id="title"]')).getText().then(function (text) {
				console.log(text);
			});
		});
	});

07 - Using Page Object Pattern

